"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./lib/middleware/auth.ts":
/*!********************************!*\
  !*** ./lib/middleware/auth.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAuthMiddleware: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   getAuthToken: () => (/* binding */ getAuthToken),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth),\n/* harmony export */   requireTenantAccess: () => (/* binding */ requireTenantAccess),\n/* harmony export */   verifyAuthToken: () => (/* binding */ verifyAuthToken)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ \"(middleware)/./lib/auth.ts\");\n\n\nfunction getAuthToken(request) {\n    // Try cookie first (more secure)\n    const cookieToken = request.cookies.get('auth-token')?.value;\n    if (cookieToken) {\n        return cookieToken;\n    }\n    // Fall back to Authorization header\n    const authHeader = request.headers.get('authorization');\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n        return authHeader.substring(7);\n    }\n    return null;\n}\nfunction verifyAuthToken(token) {\n    try {\n        const payload = (0,_lib_auth__WEBPACK_IMPORTED_MODULE_1__.verifyJWT)(token);\n        if (!payload) {\n            return null;\n        }\n        return {\n            userId: payload.userId,\n            tenantId: payload.tenantId,\n            role: payload.role,\n            email: payload.email\n        };\n    } catch (error) {\n        console.error('Token verification failed:', error);\n        return null;\n    }\n}\nfunction requireAuth(request) {\n    const token = getAuthToken(request);\n    if (!token) {\n        return {\n            error: next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required'\n            }, {\n                status: 401\n            })\n        };\n    }\n    const user = verifyAuthToken(token);\n    if (!user) {\n        return {\n            error: next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid or expired token'\n            }, {\n                status: 401\n            })\n        };\n    }\n    return {\n        user\n    };\n}\nfunction requireTenantAccess(authUser, tenantId) {\n    if (authUser.tenantId !== tenantId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Access denied - insufficient permissions'\n        }, {\n            status: 403\n        });\n    }\n    return null;\n}\nfunction createAuthMiddleware() {\n    return (request)=>{\n        const { pathname } = request.nextUrl;\n        // Skip auth for public routes\n        if (pathname.startsWith('/api/health') || pathname.startsWith('/login') || pathname.startsWith('/_next') || pathname.startsWith('/api/v1/register') || pathname.includes('.')) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        }\n        // Require auth for admin routes\n        if (pathname.startsWith('/admin')) {\n            const authResult = requireAuth(request);\n            if ('error' in authResult) {\n                // Redirect to login page instead of returning JSON\n                const loginUrl = new URL('/login', request.url);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(loginUrl);\n            }\n            // Extract tenant from URL and verify access\n            const pathParts = pathname.split('/');\n            const tenantSlug = pathParts[2]; // /admin/[tenant]\n            if (tenantSlug) {\n                // For security, we'll check tenant access using JWT payload\n                // The JWT should contain tenant information that we can verify\n                const user = authResult.user;\n                // For now, we'll implement a basic tenant slug validation\n                // In a production system, you'd store tenant slug in JWT or make the check more sophisticated\n                // Basic validation: prevent access to other tenants\n                // This is a simple approach - in production you'd want to include tenant slug in JWT\n                // or implement a more robust tenant resolution system\n                // For demo purposes, we'll allow access only if the user is authenticated\n                // and redirect to login with error if they try to access unauthorized areas\n                // Log the access attempt for security monitoring\n                console.log(`User ${user.email} (tenant: ${user.tenantId}) accessing /admin/${tenantSlug}`);\n                // This is a basic implementation - for full security you'd want to:\n                // 1. Include tenant slug in JWT during login\n                // 2. Compare JWT tenant slug with URL tenant slug\n                // 3. Or resolve tenant slug to ID and compare with user.tenantId\n                // For now, we ensure the user is authenticated and log access\n                if (!user.tenantId) {\n                    const accessDeniedUrl = new URL('/login?error=access_denied', request.url);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(accessDeniedUrl);\n                }\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./lib/middleware/auth.ts\n");

/***/ })

});