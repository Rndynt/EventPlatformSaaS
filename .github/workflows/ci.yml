name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npm run check

    - name: Run ESLint
      run: npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0

    - name: Run Prettier check
      run: npx prettier --check .

    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        JWT_SECRET: test-secret-key
        NEXT_PUBLIC_BASE_URL: http://localhost:3000

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
        NEXT_PUBLIC_BASE_URL: https://your-domain.com

    - name: Check build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "Build successful"

  database-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: npm run db:push
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test

    - name: Verify schema
      run: |
        npx drizzle-kit introspect:pg --config=drizzle.config.ts
        echo "Database schema verification completed"
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test

  security-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for outdated packages
      run: npm outdated || true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for preview
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
        NEXT_PUBLIC_BASE_URL: https://preview-${{ github.event.number }}.your-domain.com

    - name: Deploy to preview environment
      run: |
        echo "Preview deployment would happen here"
        echo "Preview URL: https://preview-${{ github.event.number }}.your-domain.com"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security-audit]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-domain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        NEXT_PUBLIC_STRIPE_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }}
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

    - name: Run database migrations
      run: npm run db:push
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Deploy to production
      run: |
        echo "Production deployment would happen here"
        echo "This could integrate with Vercel, Netlify, or your hosting provider"
        # Example Vercel deployment:
        # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Deployment successful"
          # Add Slack/Discord/email notification here
        else
          echo "❌ Deployment failed"
          # Add failure notification here
        fi
